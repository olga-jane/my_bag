// Developer Express Code Central Example:
// Commands in the XtraRichEdit Suite - How to bind commands to buttons, check boxes and other UI elements
// 
// This project illustrates how to bind an XtraRichEdit command to the UI element.
// A DevExpress.XtraEditors.SimpleButton
// (http://documentation.devexpress.com/#WindowsForms/clsDevExpressXtraEditorsSimpleButtontopic)
// button is bound to Undo command
// (http://documentation.devexpress.com/#WindowsForms/clsDevExpressXtraRichEditCommandsUndoCommandtopic)
// via creating a command-enabled descendant. Another SimpleButton is bound to Redo
// command
// (http://documentation.devexpress.com/#WindowsForms/clsDevExpressXtraRichEditCommandsRedoCommandtopic)
// via the Command Adapter technique. A CheckEdit
// (http://documentation.devexpress.com/#WindowsForms/clsDevExpressXtraEditorsCheckEdittopic)
// is bound to the ToggleFontBold command
// (http://documentation.devexpress.com/#WindowsForms/clsDevExpressXtraRichEditCommandsToggleFontBoldCommandtopic).
// Once implemented in the application, the command UI elements properly respond to
// changes in the XtraRichEdit control. This behavior is illustrated by an example,
// in which the command buttons correctly reflect changes in Undo and Redo command
// state. Moreover, all command elements are automatically grayed out and disabled
// when the RichEditControl becomes read-only.
// 
// You can find sample updates and versions for different programming languages here:
// http://www.devexpress.com/example=E1774

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Properties {


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "8.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
